name: Build and Release Mesa Git

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'  # Every day at 6AM UTC
  push:
    branches:
      - master
      - llvm  # Allow builds from llvm branch for testing

permissions:
  contents: write

jobs:
  build-mesa:
    runs-on: ubuntu-latest
    container: fedora:rawhide
    outputs:
      mesa_commit: ${{ steps.mesa_info.outputs.commit }}

    env:
      MESA_INSTALL_DIR: ${{ github.workspace }}/mesa-install

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          dnf -y update && \
          dnf -y install gcc gcc-c++ make automake autoconf libtool \
            meson ninja-build git wget python3-pyyaml \
            bison flex glslang cmake libglvnd-core-devel \
            libdrm-devel libX11-devel libXext-devel libXfixes-devel \
            libXrandr-devel libXxf86vm-devel libxcb-devel libxshmfence-devel \
            libva-devel libvdpau-devel wayland-devel wayland-protocols-devel \
            vulkan-headers vulkan-loader-devel expat-devel zlib-devel \
            elfutils-libelf-devel libunwind-devel python3-mako python3-ply llvm-devel clang-devel \
            zip unzip patchelf

      - name: Clone Mesa repo
        id: mesa_info
        run: |
          MESA_COMMIT=$(git ls-remote https://gitlab.freedesktop.org/mesa/mesa.git HEAD | cut -f1)
          git clone https://gitlab.freedesktop.org/mesa/mesa.git
          cd mesa
          git checkout $MESA_COMMIT
          echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "commit_full=$MESA_COMMIT" >> $GITHUB_OUTPUT
          echo "Mesa commit (short): $(git rev-parse --short HEAD)"
          echo "Mesa commit (full): $MESA_COMMIT"

      - name: Configure Mesa build
        run: |
          cd mesa
          meson setup build \
            --prefix="$MESA_INSTALL_DIR" \
            --libdir=lib64 \
            -Dgallium-drivers=radeonsi,softpipe,llvmpipe,zink \
            -Dvulkan-drivers=amd \
            -Dbuildtype=release || { echo "Meson setup failed. This may be a Mesa git issue."; exit 2; }

      - name: Build Mesa
        run: |
          cd mesa
          ninja -C build || { echo "Mesa build failed. This may be a Mesa git issue."; exit 2; }

      - name: Install Mesa
        run: |
          cd mesa
          ninja -C build install || { echo "Mesa install failed."; exit 2; }

      - name: Bundle LLVM libraries
        run: |
          # Create lib directory for bundled libraries
          mkdir -p "$MESA_INSTALL_DIR/lib64/bundled"
          
          # Find and copy LLVM libraries that Mesa depends on
          LLVM_LIBS=$(ldd "$MESA_INSTALL_DIR/lib64/libvulkan_radeon.so" | grep -E "libLLVM|libclang" | awk '{print $3}' | grep -v "not found" || true)
          if [ -n "$LLVM_LIBS" ]; then
            echo "Copying LLVM libraries:"
            for lib in $LLVM_LIBS; do
              if [ -f "$lib" ]; then
                echo "  $lib"
                cp "$lib" "$MESA_INSTALL_DIR/lib64/bundled/"
              fi
            done
          fi
          
          # Also copy any LLVM shared libraries from system
          find /usr/lib64 -name "libLLVM*.so*" -exec cp {} "$MESA_INSTALL_DIR/lib64/bundled/" \; 2>/dev/null || true
          find /usr/lib64 -name "libclang*.so*" -exec cp {} "$MESA_INSTALL_DIR/lib64/bundled/" \; 2>/dev/null || true
          
          # Set RPATH for Mesa libraries to look in bundled directory first
          if command -v patchelf >/dev/null 2>&1; then
            find "$MESA_INSTALL_DIR/lib64" -name "*.so*" -not -path "*/bundled/*" -exec \
              patchelf --set-rpath '$ORIGIN/bundled:$ORIGIN' {} \; 2>/dev/null || true
          fi
          
          echo "Bundled libraries:"
          ls -la "$MESA_INSTALL_DIR/lib64/bundled/" || echo "No bundled libraries found"

      - name: Patch Vulkan ICD for portability
        run: |
          find "$MESA_INSTALL_DIR/share/vulkan/icd.d" -type f -name "*.json" -exec \
          sed -i 's|"library_path": *".*libvulkan_radeon.so"|"library_path": "libvulkan_radeon.so"|' {} \;

      - name: Add metadata and helper
        run: |
          echo "Mesa Git Commit (short): ${{ steps.mesa_info.outputs.commit }}" > $MESA_INSTALL_DIR/build-info.txt
          echo "Mesa Git Commit (full):  ${{ steps.mesa_info.outputs.commit_full }}" >> $MESA_INSTALL_DIR/build-info.txt
          echo "Build Date: $(date -u)" >> $MESA_INSTALL_DIR/build-info.txt
          if [ -f "$GITHUB_WORKSPACE/mesa-git" ]; then
            cp "$GITHUB_WORKSPACE/mesa-git" "$MESA_INSTALL_DIR/"
            chmod +x "$MESA_INSTALL_DIR/mesa-git"
          fi

      - name: Generate timestamp
        id: timestamp
        run: |
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "Generated timestamp: $TIMESTAMP"

      - name: Archive Mesa build
        run: |
          mkdir -p $GITHUB_WORKSPACE/artifacts
          cd "$MESA_INSTALL_DIR"
          zip -r "$GITHUB_WORKSPACE/artifacts/mesa-git.zip" .
          ls -la "$GITHUB_WORKSPACE/artifacts/mesa-git.zip"

      - name: Create Git tag and release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: mesa-${{ steps.timestamp.outputs.timestamp }}
          name: Mesa Git Build ${{ steps.timestamp.outputs.timestamp }}
          body: |
            Mesa Git Build with Bundled LLVM

            **Mesa Commit:** ${{ steps.mesa_info.outputs.commit }} (${{ steps.mesa_info.outputs.commit_full }})
            **Build Date:** ${{ steps.timestamp.outputs.timestamp }}
            **LLVM Support:** LLVM 20.1 libraries bundled for Vulkan Translation Layers

            This build contains the latest Mesa drivers compiled from Mesa upstream HEAD with bundled LLVM libraries for maximum portability.

            **Usage:**
            1. Extract the archive
            2. Use the `mesa-git` wrapper script for any application: `./mesa-git your-application`
            3. For Steam: Set launch option to `/path/to/mesa-git %command%`

            The `mesa-git` script automatically configures all environment variables and LLVM library paths.

            You can verify the commit at: https://gitlab.freedesktop.org/mesa/mesa/-/commit/${{ steps.mesa_info.outputs.commit_full }}
          files: artifacts/mesa-git.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}